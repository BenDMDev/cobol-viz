package main.java.scanners.tokens.cobol;

import java.util.HashMap;
import java.util.HashSet;

import main.java.scanners.tokens.TokenType;

public enum COBOLTokenType implements TokenType {

	// Reserved Words
	ACCESS, ADVANCING, AFTER, ALL, ALPHABET, ALPHABETIC, ALPHANUMERIC,
	ALSO, ALTERNATE, AND, ANY, ARE, AREA, AREAS, ASCENDING, ASSIGN, AT,AUTHOR,
	BEFORE, BINARY, BLANK, BLOCK, BOTTOM, BY, CD, CF, CH, CHARACTER,
	CHARACTERS,	CLASS, COBOL, CODE, COLLATING, COLUMN, COMMA, COMMON,COMMUNICATION,
	COMP, COMPUTATIONAL,  CONFIGURATION, CONTAINS, CONTENT,  CONTROL,
	CONTROLS, CONSOLE, CONVERTING, COPY, CORR, CORRESPONDING, COUNT, CURRENCY,DATA, DATE, 
	DAY, DE, DEBUGGING, DECLARATIVES, DELIMITED, DELIMITER, DEPENDING, DESCENDING,
	DESTINATION, DETAIL, DISABLE, DIVISION, DOWN, DUPLICATES, DYNAMIC,
	EGI, ELSE, EMI, ENABLE, END, ENTER,	ENVIRONMENT, EOP, EQUAL, ERROR,	ESI,
	EVERY, EXCEPTION,  EXTEND,	EXTERNAL, FALSE, FD, FILE, FILLER, FINAL, FIRST,
	FOOTING, FOR, FROM,	GENERATE, GIVING, GOBAL,  GREATER, GROUP, HEADING, 
	MESSAGE, IDENTIFICATION, MODE,  MODULES, IN,  INDEX, MULTIPLE, INDEXED, 
	INDICATE, INITIAL, NATIVE,  NEGATIVE, INITIATE, NEXT, INPUT, NO, NOT,
	 NUMBER, INSTALLATION, NUMERIC,INTO, INVALID, IS, OCCURS, JUST, OF,
	JUSTIFIED, OFF,	OMITTED, KEY, ON,  LABEL, OPTIONAL, LAST, OR, LEADING, ORDER, LEFT,
	ORGANIZATION, LENGTH, OTHER, LESS, OUTPUT, LIMIT, OVERFLOW, LIMITS, LINAGE, PADDING,
	LINE, PAGE, LINES, LINKAGE, PF, LOCK, PH, PIC, PICTURE, PLUS, POINTER,	POSITION,
	POSITIVE, PRINTING, PROCEDURE, PROCEDURES, PROCEED,	PROGRAM, PURGE, QUEUE, QUOTE, QUOTES,
	RANDOM, RD,  RECEIVE, RECORD, RECORDS, REDEFINES, REEL, REFERENCE,	REFERENCES, RELATIVE,
	 REMAINDER, REMOVAL, RENAMES, REPLACE, REPLACING, REPORT, REPORTING, REPORTS, RERUN,
	RESERVE, RESET, REVERSED, REWIND, RF, RH, RIGHT, ROUNDED, RUN, SAME,  SD,
	 SECTION, SECURITY, SEGMENT, SELECT, SEND, SENTENCE, SEPARATE, SEQUENCE, SEQUENTIAL,
	 SIGN, SIZE, SOURCE, SPACE, SPACES, STANDARD, STATUS, 
	 SUM, SUPPRESS, USAGE,	SYMBOLYC, USE, SYNC, USING, SYNCHRONIZED, VALUE, TABLE, VALUES,
	TALLYING, VARYING, TAPE, TERMINAL, WHEN, TERMINATE, WITH, TEST, WORDS, TEXT, THAN, 
	THEN, THROUGH, ZERO, THRU, ZEROES, TIME, ZEROS, TIMES, TO, TOP,	TRAILING, TRUE, TYPE, UNIT,
	UNTIL, UP, UPON, 
	
	// Statement Prefixes
	ACCEPT, ADD, ALTER, CALL, CANCEL, CLOSE, COMPUTE, CONTINUE, DELETE, DISPLAY, DIVIDE, ENTRY, EVALUATE, 
	EXIT, GOBACK, GO, IF, INITIALIZE, INSPECT, MERGE, MOVE, MULTIPLY, OPEN, PERFORM, READ, RELEASE, RETURN,
	REWRITE, SEARCH, SET, SORT, START, STOP, STRING, SUBTRACT, UNSTRING, WRITE,
	
	
	
	// Reserved Words with hyphens (not allowed in Java)
	ALPHABETIC_LOWER("ALPHABETIC-LOWER"), ALPHABETIC_UPPER("ALPHABETIC-UPPER"),
	ALPHANUMERIC_EDITED("ALPHANUMERIC-EDITED"), CLOCK_UNITS("CLOCK-UNITS"),
	DATE_COMPILED("DATE-COMPILED"),	DATE_WRITTEN("DATE-WRITTEN"), DAY_OF_WEEK("DAY-OF-WEEK"),
	DEBUG_CONTENTS("DEBUG-CONTENTS"), DEBUG_ITEM("DEBUG-ITEM"),	DEBUG_LINE("DEBUG-LINE"),
	DEBUG_NAME("DEBUG-NAME"), DEBUG_SUB_1("DEBUG-SUB-1"), DEBUG_SUB_2("DEBUG-SUB-2"),
	DEBUG_SUB_3("DEBUG-SUB-3"),	DECIMAL_POINT("DECIMAL-POINT"), END_ADD("END-ADD"), END_ACCEPT("END-ACCEPT"),
	END_CALL("END-CALL"), END_COMPUTE("END-COMPUTE"), END_DELETE("END-DELETE"),	END_DIVIDE("END-DIVIDE"),
	END_EVALUATE("END-EVALUATE"), END_DISPLAY("END-DISPLAY"), END_IF("END-IF"), END_MULTIPLY("END-MULTIPLY"), END_OF_PAGE("END-OF-PAGE"),
	END_PERFORM("END-PERFORM"),	END_READ("END-READ"), END_RECEIVE("END-RECEIVE"), END_RETURN("END-RETURN"),
	END_REWRITE("END-REWRITE"), END_SEARCH("END-SEARCH"), END_START("END-START"), END_STRING("END-STRING"),
	END_SUBTRACT("END-SUBTRACT"), END_UNSTRING("END-UNSTRING"), END_WRITE("END-WRITE"),	FILE_CONTROL("FILE-CONTROL"),
	LOW_VALUE("LOW-VALUE"), HIGH_VALUE("HIGH-VALUE"), LOW_VALUES("LOW-VALUES"),	HIGH_VALUES("HIGH-VALUES"), 
	MEMORY,I_O("I-0"), I_0_CONTROL("I-0-CONTROL"), INPUT_OUTPUT("INPUT-OUTPUT"), NUMERIC_EDITED("NUMERIC-EDITED"),
	OBJECT_COMPUTER("OBJECT-COMPUTER"), PACKED_DECIMAL("PACKED-DECIMAL"), LINAGE_COUNTER("LINAGE-COUNTER"), 
	LINE_COUNTER("LINE-COUNTER"), PAGE_COUNTER("PAGE-COUNTER"), PROGRAM_ID("PROGRAM-ID"), SEGMENT_LIMIT("SEGMENT-LIMIT"),
	SORT_MERGE("SORT-MERGE"), SOURCE_COMPUTER("SOURCE-COMPUTER"), SPECIAL_NAMES("SPECIAL-NAMES"),
	STANDARD_1("STANDARD-1"), STANDARD_2("STANDARD_2"), SUB_QUEUE_1("SUB-QUEUE-1"), SUB_QUEUE_2("SUB-QUEUE-2"),
	SUB_QUEUE_3("SUB-QUEUE-3"), WORKING_STORAGE("WORKING-STORAGE"),
	
	// Special Symbols
	ADDITION_SYMBOL("+"), SUBTRACTION_SYMBOL("-"), MULTIPLICATION_SYMBOL("*"), LEFT_PAREN("("), RIGHT_PAREN(")"), DIVISION_SYMBOL("/"), EXPONENTIATION_SYMBOL("**"), GREATER_THAN_SYMBOL(">"),
	LESS_THAN_SYMBOL("<"), EQUALS_SYMBOL("="), GREATER_THAN_EQUALS(">="), LESS_THAN_EQUALS_SYMBOL("<="), COMMA_SYMBOL(","), FULL_STOP("."),
	
	// Literals
	IDENTIFIER, INTEGER, STRING_LITERAL, REAL, EOF, FIGURATIVE_CONSTANT;
	
	static final int RESERVED_FIRST = ACCESS.ordinal();
	static final int RESERVED_LAST = UPON.ordinal();	
	static final int STATEMENT_PREFIX_FIRST = ACCEPT.ordinal();
	static final int STATEMENT_PREFIX_LAST = WRITE.ordinal();
	static final int HYPHENATED_FIRST = ALPHABETIC_LOWER.ordinal();
	static final int HYPHENATED_LAST = WORKING_STORAGE.ordinal();
	static final int SYMBOLS_FIRST = ADDITION_SYMBOL.ordinal();
	static final int SYMBOLS_LAST = FULL_STOP.ordinal();
	String text;
	
	/*
	 * Default constructor
	 */
	COBOLTokenType() {
		this.text = this.toString().toLowerCase();
	}
	
	/**
	 * Constructor
	 * @param text
	 */
	COBOLTokenType(String text) {
		this.text = text;
	}
	
	/**
	 * Getter for Value text
	 * @return
	 */
	public String getText() {
		return this.text; 
	}
	
	/**
	 * Set of all Reserved words as Strings for lookup
	 */
	public static HashSet<String> RESERVED = new HashSet<String>();
	static {
		COBOLTokenType val[] = COBOLTokenType.values();
		for(int i = RESERVED_FIRST; i <= RESERVED_LAST; i++) {
			RESERVED.add(val[i].getText().toLowerCase());
		}
	}
	
	public static HashSet<String> STATEMENT_PREFIXES = new HashSet<String>();
	static {
		COBOLTokenType val[] = COBOLTokenType.values();
		for(int i = STATEMENT_PREFIX_FIRST; i <= STATEMENT_PREFIX_LAST; i++) {
			STATEMENT_PREFIXES.add(val[i].getText().toLowerCase());
		}
	}
	
	
	/**
	 * HashMap mapping string values of hyphenated reserved words to TokenType
	 */
	public static HashMap<String, COBOLTokenType> RESERVED_HYPHENS = new HashMap<String, COBOLTokenType>();
	static {
		COBOLTokenType val[] = COBOLTokenType.values();
		for(int i = HYPHENATED_FIRST; i <= HYPHENATED_LAST; i ++) {
			RESERVED_HYPHENS.put(val[i].getText().toLowerCase(), val[i]);
		}		
	}
	
	/**
	 * HashMap mapping  
	 */
	public static HashMap<String, COBOLTokenType> SPECIAL_SYMBOLS = new HashMap<String, COBOLTokenType>();
	static {
		COBOLTokenType val[] = COBOLTokenType.values();
		for(int i = SYMBOLS_FIRST; i <= SYMBOLS_LAST; i ++) {
			SPECIAL_SYMBOLS.put(val[i].getText(), val[i]);
		}
	}
	
}
