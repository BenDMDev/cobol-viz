package lexer.tokens;

import java.util.HashMap;
import java.util.HashSet;

public enum TokenType implements ExtractToken {

	// Reserved Words
	ACCEPT, ACCESS, ADD, ADVANCING, AFTER, ALL, ALPHABET, ALPHABETIC, ALPHANUMERIC,
	ALSO, ALTER, ALTERNATE, AND, ANY, ARE, AREA, AREAS,	ASCENDING, ASSIGN, AT,AUTHOR,
	BEFORE, BINARY, BLANK, BLOCK, BOTTOM, BY, CALL, CANCEL, CD,	CF,	CH, CHARACTER,
	CHARACTERS,	CLASS, CLOSE, COBOL, CODE, COLLATING, COLUMN, COMMA, COMMON,COMMUNICATION,
	COMP, COMPUTATIONAL, COMPUTE, CONFIGURATION, CONTAINS, CONTENT, CONTINUE, CONTROL,
	CONTROLS, CONVERTING, COPY, CORR, CORRESPONDING, COUNT,	CURRENCY,DATA, DATE, 
	DAY, DE, DEBUGGING, DECLARATIVES, DELETE, DELIMITED, DELIMITER, DEPENDING, DESCENDING,
	DESTINATION, DETAIL, DISABLE, DISPLAY, DIVIDE, DIVISION, DOWN, DUPLICATES, DYNAMIC,
	EGI, ELSE, EMI, ENABLE, END, ENTER,	ENVIRONMENT, EOP, EQUAL, ERROR,	ESI, EVALUATE,
	EVERY, EXCEPTION, EXIT, EXTEND,	EXTERNAL, FALSE, FD, FILE, FILLER, FINAL, FIRST,
	FOOTING, FOR, FROM,	GENERATE, GIVING, GOBAL, GO, GREATER, GROUP, HEADING, MERGE,
	MESSAGE, IDENTIFICATION, MODE, IF, MODULES, IN, MOVE, INDEX, MULTIPLE, INDEXED, MULTIPLY,
	INDICATE, INITIAL, NATIVE, INITIALIZE, NEGATIVE, INITIATE, NEXT, INPUT, NO, NOT,
	INSPECT, NUMBER, INSTALLATION, NUMERIC,INTO, INVALID, IS, OCCURS, JUST, OF,
	JUSTIFIED, OFF,	OMITTED, KEY, ON, OPEN, LABEL, OPTIONAL, LAST, OR, LEADING, ORDER, LEFT,
	ORGANIZATION, LENGTH, OTHER, LESS, OUTPUT, LIMIT, OVERFLOW, LIMITS, LINAGE, PADDING,
	LINE, PAGE, LINES, PERFORM, LINKAGE, PF, LOCK, PH, PIC, PICTURE, PLUS, POINTER,	POSITION,
	POSITIVE, PRINTING, PROCEDURE, PROCEDURES, PROCEED,	PROGRAM, PURGE, QUEUE, QUOTE, QUOTES,
	RANDOM, RD, READ, RECEIVE, RECORD, RECORDS, REDEFINES, REEL, REFERENCE,	REFERENCES, RELATIVE,
	RELEASE, REMAINDER, REMOVAL, RENAMES, REPLACE, REPLACING, REPORT, REPORTING, REPORTS, RERUN,
	RESERVE, RESET, RETURN,	REVERSED, REWIND, REWRITE, RF, RH, RIGHT, ROUNDED, RUN, SAME,  SD,
	SEARCH, SECTION, SECURITY, SEGMENT,	SELECT, SEND, SENTENCE, SEPARATE, SEQUENCE, SEQUENTIAL,
	SET, SIGN, SIZE, SORT, SOURCE, SPACE, SPACES, STANDARD, START, STATUS, STOP, STRING, 
	SUBTRACT, SUM, SUPPRESS, USAGE,	SYMBOLYC, USE, SYNC, USING, SYNCHRONIZED, VALUE, TABLE, VALUES,
	TALLYING, VARYING, TAPE, TERMINAL, WHEN, TERMINATE, WITH, TEST, WORDS, TEXT, THAN, WRITE,
	THEN, THROUGH, ZERO, THRU, ZEROES, TIME, ZEROS, TIMES, TO, TOP,	TRAILING, TRUE, TYPE, UNIT,
	UNSTRING, UNTIL, UP, UPON, 
	
	// Reserved Words with hyphens (not allowed in Java)
	ALPHABETIC_LOWER("ALPHABETIC-LOWER"), ALPHABETIC_UPPER("ALPHABETIC-UPPER"),
	ALPHANUMERIC_EDITED("ALPHANUMERIC-EDITED"), CLOCK_UNITS("CLOCK-UNITS"),
	DATE_COMPILED("DATE-COMPILED"),	DATE_WRITTEN("DATE-WRITTEN"), DAY_OF_WEEK("DAY-OF-WEEK"),
	DEBUG_CONTENTS("DEBUG-CONTENTS"), DEBUG_ITEM("DEBUG-ITEM"),	DEBUG_LINE("DEBUG-LINE"),
	DEBUG_NAME("DEBUG-NAME"), DEBUG_SUB_1("DEBUG-SUB-1"), DEBUG_SUB_2("DEBUG-SUB-2"),
	DEBUG_SUB_3("DEBUG-SUB-3"),	DECIMAL_POINT("DECIMAL-POINT"), END_ADD("END-ADD"),
	END_CALL("END-CALL"), END_COMPUTE("END-COMPUTE"), END_DELETE("END-DELETE"),	END_DIVIDE("END-DIVIDE"),
	END_EVALUATE("END-EVALUATE"), END_IF("END-IF"), END_MULTIPLY("END-MULTIPLY"), END_OF_PAGE("END-OF-PAGE"),
	END_PERFORM("END-PERFORM"),	END_READ("END-READ"), END_RECEIVE("END-RECEIVE"), END_RETURN("END-RETURN"),
	END_REWRITE("END-REWRITE"), END_SEARCH("END-SEARCH"), END_START("END-START"), END_STRING("END-STRING"),
	END_SUBTRACT("END-SUBTRACT"), END_UNSTRING("END-UNSTRING"), END_WRITE("END-WRITE"),	FILE_CONTROL("FILE-CONTROL"),
	LOW_VALUE("LOW-VALUE"), HIGH_VALUE("HIGH-VALUE"), LOW_VALUES("LOW-VALUES"),	HIGH_VALUES("HIGH-VALUES"), 
	MEMORY,I_O("I-0"), I_0_CONTROL("I-0-CONTROL"), INPUT_OUTPUT("INPUT-OUTPUT"), NUMERIC_EDITED("NUMERIC-EDITED"),
	OBJECT_COMPUTER("OBJECT-COMPUTER"), PACKED_DECIMAL("PACKED-DECIMAL"), LINAGE_COUNTER("LINAGE-COUNTER"), 
	LINE_COUNTER("LINE-COUNTER"), PAGE_COUNTER("PAGE-COUNTER"), PROGRAM_ID("PROGRAM-ID"), SEGMENT_LIMIT("SEGMENT-LIMIT"),
	SORT_MERGE("SORT-MERGE"), SOURCE_COMPUTER("SOURCE-COMPUTER"), SPECIAL_NAMES("SPECIAL-NAMES"),
	STANDARD_1("STANDARD-1"), STANDARD_2("STANDARD_2"), SUB_QUEUE_1("SUB-QUEUE-1"), SUB_QUEUE_2("SUB-QUEUE-2"),
	SUB_QUEUE_3("SUB-QUEUE-3"), WORKING_STORAGE("WORKING-STORAGE"),
	
	// Special Symbols
	ADDITION("+"), SUBTRACTION("-"), MULTIPLICATION("*"), DIVISION_SYMBOL("/"), EXPONENTIATION("**"), GREATER_THAN(">"),
	LESS_THAN("<"), EQUALS("="), GREATER_THAN_EQUALS(">="), LESS_THAN_EQUALS("<="),
	
	// Literals
	IDENTIFIER, INTEGER, STRING_LITERAL, REAL, EOF;
	
	String text;
	
	TokenType() {
		this.text = this.toString();
	}
	
	TokenType(String value) {
		this.text = value;
	}
	
	public String getText() {
		return this.text; 
	}
	
	public static HashSet<String> RESERVED = new HashSet<String>();
	static {
		TokenType val[] = TokenType.values();
		for(int i = ACCEPT.ordinal(); i <= UPON.ordinal(); i++) {
			RESERVED.add(val[i].toString());
		}
	}
	
	public static HashMap<String, TokenType> RESERVED_HYPHENS = new HashMap<String, TokenType>();
	static {
		TokenType val[] = TokenType.values();
		for(int i = ALPHABETIC_LOWER.ordinal(); i <= WORKING_STORAGE.ordinal(); i ++) {
			RESERVED_HYPHENS.put(val[i].getText(), val[i]);
		}		
	}
	
	public static HashMap<String, TokenType> SPECIAL_SYMBOLS = new HashMap<String, TokenType>();
	static {
		TokenType val[] = TokenType.values();
		for(int i = ADDITION.ordinal(); i <= LESS_THAN_EQUALS.ordinal(); i ++) {
			SPECIAL_SYMBOLS.put(val[i].getText(), val[i]);
		}
	}
	
}
